from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.mail import send_mail
from django.conf import settings


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)
    subscribers = models.ManyToManyField(User, related_name="subscribed_categories", blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        verbose_name_plural = _("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")


# –ü–æ—Å—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
class Post(models.Model):
    ARTICLE = 'AR'
    NEWS = 'NW'

    POST_TYPE_CHOICES = [
        (ARTICLE, '–°—Ç–∞—Ç—å—è'),
        (NEWS, '–ù–æ–≤–æ—Å—Ç—å'),
    ]

    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç")
    post_type = models.CharField(max_length=2, choices=POST_TYPE_CHOICES, default=ARTICLE, verbose_name="–¢–∏–ø –ø–æ—Å—Ç–∞")
    categories = models.ManyToManyField(Category, related_name="posts", verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")  # üîπ –°–≤—è–∑—å M2M
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ê–≤—Ç–æ—Ä")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    def __str__(self):
        return self.title


# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º
class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name="comments", verbose_name=_("–ü–æ—Å—Ç"))
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_("–ê–≤—Ç–æ—Ä"))
    text = models.TextField(verbose_name=_("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"))

    def __str__(self):
        return f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.author.username}'

    class Meta:
        verbose_name = _("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        verbose_name_plural = _("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")


# –ù–æ–≤–æ—Å—Ç–∏ (–æ—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)
class News(models.Model):
    title = models.CharField(max_length=255, verbose_name=_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"))
    text = models.TextField(verbose_name=_("–¢–µ–∫—Å—Ç"))
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="news", verbose_name=_("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_("–ê–≤—Ç–æ—Ä"))
    published_date = models.DateTimeField(auto_now_add=True, verbose_name=_("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _("–ù–æ–≤–æ—Å—Ç—å")
        verbose_name_plural = _("–ù–æ–≤–æ—Å—Ç–∏")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
@receiver(post_save, sender=News)
def send_email_to_subscribers(sender, instance, created, **kwargs):
    if created:
        category = instance.category
        subscribers = category.subscribers.all()

        subject = f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {instance.title}"
        message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ç–≤–æ—ë–º –ª—é–±–∏–º–æ–º —Ä–∞–∑–¥–µ–ª–µ!\n\n{instance.text[:50]}...\n\n–ß–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ: http://127.0.0.1:8000/news/{instance.id}/"

        for user in subscribers:
            send_mail(
                subject,
                message,
                settings.DEFAULT_FROM_EMAIL,
                [user.email],
                fail_silently=False,
            )
